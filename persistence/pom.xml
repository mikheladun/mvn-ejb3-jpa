<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>leadtrac</artifactId>
		<groupId>gov.dhs.ice</groupId>
		<version>0.1</version>
	</parent>

	<artifactId>leadtrac-persistence</artifactId>
	<packaging>ejb</packaging>

	<name>LeadTrac Persistence</name>

	<dependencyManagement>
		<dependencies>
			<!-- Oracle driver -->
			<dependency>
				<groupId>oracle</groupId>
				<artifactId>ojdbc5</artifactId>
				<version>11.2.0.3</version>
				<scope>provided</scope>
			</dependency>

			<!-- Annotation processor to generate the JPA 2.0 metamodel classes for 
				typesafe criteria queries -->
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-jpamodelgen</artifactId>
				<version>1.2.0.Final</version>
				<scope>provided</scope>
			</dependency>

			<!-- Annotation processor that raising compilation errors whenever constraint 
				annotations are incorrectly used. -->
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-validator-annotation-processor</artifactId>
				<version>4.3.1.Final</version>
				<scope>provided</scope>
			</dependency>

			<!-- EJB -->
			<dependency>
				<groupId>javax.ejb</groupId>
				<artifactId>ejb-api</artifactId>
				<version>3.0</version>
				<scope>provided</scope>
			</dependency>

			<!-- Spring dependencies -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jdbc</artifactId>
				<version>${version.spring}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aspects</artifactId>
				<version>${version.spring}</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-instrument</artifactId>
				<version>${version.spring}</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-web</artifactId>
				<version>${version.spring}</version>
				<type>jar</type>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-config</artifactId>
				<version>${version.spring}</version>
				<type>jar</type>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-core</artifactId>
				<version>${version.spring}</version>
				<type>jar</type>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-taglibs</artifactId>
				<version>${version.spring}</version>
				<type>jar</type>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-aspects</artifactId>
				<version>${version.spring}</version>
				<type>jar</type>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-acl</artifactId>
				<version>${version.spring}</version>
				<type>jar</type>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-ldap</artifactId>
				<version>${version.spring}</version>
				<type>jar</type>
				<scope>provided</scope>
			</dependency>
			<!-- AspectJ -->
			<dependency>
				<groupId>org.aspectj</groupId>
				<artifactId>aspectjrt</artifactId>
				<version>${version.aspectj}</version>
				<type>jar</type>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.aspectj</groupId>
				<artifactId>aspectjweaver</artifactId>
				<version>${version.aspectj}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
				<version>${version.commons.logging}</version>
			</dependency>
			<dependency>
				<groupId>net.sf.ehcache</groupId>
				<artifactId>ehcache-core</artifactId>
				<version>2.3.0</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>gov.dhs.ice</groupId>
			<artifactId>leadtrac-core</artifactId>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JPA API using the provided scope It is included in JBoss 
			AS 7 / EAP 6 -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-ehcache</artifactId>
		</dependency>

		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import Spring dependencies, these are either from community or versions 
			certified in WFK2 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
		</dependency>

		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<!-- Compile-time aspect weaving (part of workaround for org.hibernate.LazyInitializationException 
				problem) -->
			<!-- <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>aspectj-maven-plugin</artifactId> 
				<version>1.4</version> <configuration> <source>1.6</source> <target>1.6</target> 
				<XnoInline>true</XnoInline> <aspectLibraries> <aspectLibrary> <groupId>org.springframework</groupId> 
				<artifactId>spring-aspects</artifactId> </aspectLibrary> </aspectLibraries> 
				<showWeaveInfo>true</showWeaveInfo> </configuration> <executions> <execution> 
				<phase>compile</phase> <goals> <goal>compile</goal> </goals> </execution> 
				</executions> </plugin> -->
			<plugin>
				<artifactId>maven-ejb-plugin</artifactId>
				<version>${version.ejb.plugin}</version>
				<configuration>
					<!-- Tell Maven we are using EJB 3.1 -->
					<ejbVersion>3.1</ejbVersion>
					<generateClient>true</generateClient>
					<clientExcludes>
						<clientExclude>generated-resources/**</clientExclude>
						<clientExclude>**/persistence/*Bean.class</clientExclude>
						<clientExclude>**/business/*Service.class</clientExclude>
						<clientExclude>META-INF/*.*</clientExclude>
					</clientExcludes>
					<archive>
						-->
						<!-- In this case, we merge the existing WID one so we get the non 
							versioned dependencies in the classpath entry. <manifestFile>META-INF/MANIFEST.MF</manifestFile> -->
						<manifestEntries>
							<Dependencies>org.slf4j</Dependencies>
						</manifestEntries>
						<!-- <manifest> <addClasspath>true</addClasspath> <classpathLayoutType>simple</classpathLayoutType> 
							</manifest> -->
					</archive>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run 
				just unit tests based on a custom pattern -->
			<!-- Seperate profiles are provided for running all tests, including Arquillian 
				tests that execute in the specified container -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
